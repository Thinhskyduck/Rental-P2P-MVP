# OpenAPI 3.0 Specification for P2P Rental Platform MVP (v2.2 - Final MVP)

openapi: 3.0.1
info:
  title: P2P Rental Platform API (Final MVP)
  description: |
    This is the complete and final API specification for the MVP. 
    It follows a UI-Oriented (BFF) approach and excludes Review and Chat features.
    This document serves as the definitive contract between the frontend and backend.
  version: "2.2.0"
servers:
  - url: http://localhost:5000/api
    description: Development server

tags:
  - name: Views
    description: Specialized endpoints providing aggregated data for specific UI screens.
  - name: Auth
    description: User Authentication (Register, Login, Logout).
  - name: Items
    description: CUD (Create, Update, Delete) operations for rental items.
  - name: Rentals
    description: CUD operations for booking and managing rental transactions.
  - name: Admin
    description: Administrative operations (Requires Admin Role).

paths:
  # ===============================================================
  # View Endpoints (BFF Style)
  # ===============================================================
  /views/item-details/{id}:
    get:
      tags:
        - Views
      summary: Get all necessary data for the Item Detail page
      description: A single endpoint to fetch aggregated data including item info and owner details.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Aggregated item details, ready for UI rendering.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDetailView'
        '404':
          description: Item not found

  /views/my-rentals:
    get:
      tags:
        - Views
      summary: Get all rental data for the "My Rentals" page
      description: Provides a complete picture of the user's rental activity, both as a renter and an owner.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Aggregated rental data for the current user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyRentalsView'
        '401':
          description: Unauthorized

  # ===============================================================
  # Auth Endpoints
  # ===============================================================
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        $ref: '#/components/requestBodies/RegisterInput'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Bad request (e.g., email already exists, validation failed)

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login a user
      requestBody:
        $ref: '#/components/requestBodies/LoginInput'
      responses:
        '200':
          description: Login successful, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized (invalid credentials)

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout the current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized

  # ===============================================================
  # General Purpose Endpoints (Actions)
  # ===============================================================
  
  # --- Items ---
  /items:
    get:
      tags:
        - Items
      summary: Search or get a list of items
      parameters:
        - in: query
          name: search
          schema:
            type: string
      responses:
        '200':
          description: A list of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemSummary'
    post:
      tags:
        - Items
      summary: Create a new rental item
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateItemInput'
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '401':
          description: Unauthorized

  /items/{id}:
    put:
      tags:
        - Items
      summary: Update an item (only owner)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/CreateItemInput'
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not the owner)
        '404':
          description: Item not found
    delete:
      tags:
        - Items
      summary: Delete an item (only owner)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content (deleted successfully)
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not the owner)
        '404':
          description: Item not found

  # --- Rentals ---
  /rentals:
    post:
      tags:
        - Rentals
      summary: Create a rental request
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateRentalInput'
      responses:
        '201':
          description: Rental request created successfully
        '400':
          description: Bad request (e.g., dates not available)
        '401':
          description: Unauthorized

  /rentals/{id}/confirm:
    patch:
      tags:
        - Rentals
      summary: Confirm a rental request (by item owner)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rental confirmed
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not the owner)
        '404':
          description: Rental not found

  /rentals/{id}/reject:
    patch:
      tags:
        - Rentals
      summary: Reject a rental request (by item owner)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rental rejected
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not the owner)
        '404':
          description: Rental not found

  /rentals/{id}/complete:
    patch:
      tags:
        - Rentals
      summary: Mark a rental as complete (by renter or owner)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rental marked as complete
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not part of this rental)
        '404':
          description: Rental not found
          
  # ===============================================================
  # Admin Endpoints
  # ===============================================================
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get a list of all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of all users
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (Admin role required)
  
  /admin/users/{id}/status:
    patch:
      tags:
        - Admin
      summary: Ban or unban a user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isBanned:
                  type: boolean
      responses:
        '200':
          description: User status updated
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (Admin role required)

  /admin/items/{id}/status:
    patch:
      tags:
        - Admin
      summary: Update item status (e.g., delist a reported item)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [available, rented, delisted]
      responses:
        '200':
          description: Item status updated
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (Admin role required)

# ===============================================================
# Component Schemas (Data Models)
# ===============================================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # Reusable Schemas for Views
  schemas:
    UserSummary:
      type: object
      properties:
        _id:
          type: string
        fullName:
          type: string
        avatarUrl:
          type: string
          
    ItemSummary:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        pricePerDay:
          type: integer
        mainImage:
          type: string
          
    RentalDetail:
      type: object
      properties:
        _id:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        totalPrice:
          type: integer
        status:
          type: string
          enum: [pending_confirmation, confirmed, rejected, in_progress, completed, cancelled]
        item:
          $ref: '#/components/schemas/ItemSummary'
        counterparty:
          $ref: '#/components/schemas/UserSummary'
          note: If I am the renter, this is the owner. If I am the owner, this is the renter.
          
    # Schemas for View Endpoints
    ItemDetailView:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            type: string
        pricePerDay:
          type: integer
        address:
          type: string
        owner:
          $ref: '#/components/schemas/UserSummary'

    MyRentalsView:
      type: object
      properties:
        asRenter:
          type: array
          items:
            $ref: '#/components/schemas/RentalDetail'
        asOwner:
          type: array
          items:
            $ref: '#/components/schemas/RentalDetail'

    # General Purpose Schemas (Full Objects returned on CUD actions)
    User:
      type: object
      properties:
        _id:
          type: string
        fullName:
          type: string
        email:
          type: string
          format: email
        avatarUrl:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
        role:
          type: string
          enum: [user, admin]
        isBanned:
          type: boolean
        createdAt:
          type: string
          format: date-time
      
    Item:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            type: string
        ownerId:
          type: string
        pricePerDay:
          type: integer
        address:
          type: string
        status:
          type: string
          enum: [available, rented, delisted]
        createdAt:
          type: string
          format: date-time

  # Reusable Request Bodies
  requestBodies:
    RegisterInput:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [fullName, email, password]
            properties:
              fullName:
                type: string
              email:
                type: string
              password:
                type: string
    LoginInput:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email, password]
            properties:
              email:
                type: string
              password:
                type: string
    CreateItemInput:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [name, pricePerDay]
            properties:
              name:
                type: string
              description:
                type: string
              pricePerDay:
                type: integer
              address:
                type: string
              images:
                type: array
                items:
                  type: string
    CreateRentalInput:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [itemId, startDate, endDate]
            properties:
              itemId:
                type: string
              startDate:
                type: string
                format: date
              endDate:
                type: string
                format: date