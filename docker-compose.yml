# VAI TRÒ: Dùng để BUILD IMAGE và demo LEVEL 2
services:
  nginx:
    image: nginx:alpine
    container_name: p2p_reverse_proxy
    ports: ["80:80"]
    volumes: ["./nginx/nginx.conf:/etc/nginx/nginx.conf"]
    depends_on: [backend, frontend]
    networks: [app-network]

  backend:
    build: ./backend
    image: rental-p2p-mvp_backend # ĐẶT TÊN cho image sẽ được build
    deploy: { replicas: 3 }
    volumes: ["./backend:/usr/src/app", "/usr/src/app/node_modules"]
    env_file: ["./backend/.env"]
    depends_on:
      mongodb: { condition: service_started }
      rabbitmq: { condition: service_healthy }
    networks: [app-network]

  frontend:
    build: ./frontend
    image: rental-p2p-mvp_frontend # ĐẶT TÊN cho image sẽ được build
    container_name: p2p_frontend_app
    volumes: ["./frontend:/usr/src/app", "/usr/src/app/node_modules"]
    environment:
      - NODE_OPTIONS=--openssl-legacy-provider
      - CHOKIDAR_USEPOLLING=true
    stdin_open: true
    tty: true
    networks: [app-network]

  notification-worker:
    build: ./notification-worker
    image: rental-p2p-mvp_notification-worker # ĐẶT TÊN cho image sẽ được build
    container_name: p2p_notification_worker
    volumes: ["./notification-worker:/usr/src/app", "/usr/src/app/node_modules"]
    env_file: ["./notification-worker/.env"]
    depends_on:
      rabbitmq: { condition: service_healthy }
      mongodb: { condition: service_started }
    networks: [app-network]

  mongodb:
    image: mongo:latest
    container_name: p2p_mongodb
    ports: ["27017:27017"]
    volumes: ["mongo-data:/data/db"]
    networks: [app-network]

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: p2p_rabbitmq
    ports: ["5672:5672", "15672:15672"]
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [app-network]

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local