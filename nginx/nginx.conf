# Cấu hình số lượng tiến trình worker. 'auto' sẽ tự động điều chỉnh theo số lõi CPU.
# Đây là cài đặt tốt nhất cho hiệu năng.
worker_processes auto;

# Khối 'events' là bắt buộc, dùng để cấu hình cách Nginx xử lý các kết nối mạng.
events {
    # Mỗi worker process có thể xử lý tối đa 1024 kết nối đồng thời.
    worker_connections 1024;
}

# Khối 'http' chứa tất cả các cấu hình liên quan đến server HTTP.
http {
    # Định nghĩa một nhóm các server backend để Nginx cân bằng tải
    # Nginx sẽ tự động phân phối request đến các container của service 'backend'
    upstream backend_servers {
        server backend:5000;
    }

    # Định nghĩa server frontend
    upstream frontend_app {
        server frontend:3000;
    }

    # 'server' định nghĩa một virtual server để xử lý request.
    server {
        # Lắng nghe trên cổng 80, cổng web mặc định.
        listen 80;

        # Khi người dùng truy cập /api/...
        location /api/ {
            # Chuyển tiếp request đến nhóm backend_servers.
            # Docker sẽ tự động cân bằng tải giữa 3 container backend của bạn.
            proxy_pass http://backend_servers;

            # Các header này rất quan trọng để service backend biết được thông tin
            # về request gốc của người dùng, thay vì chỉ thấy thông tin từ Nginx.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Khi người dùng truy cập bất kỳ đường dẫn nào khác.
        location / {
            # Chuyển tiếp request đến frontend React.
            proxy_pass http://frontend_app;

            # Cấu hình này cần thiết để các kết nối WebSocket (dùng cho Hot-Reload
            # trong môi trường dev của React) có thể hoạt động qua proxy.
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
        }
    }
}